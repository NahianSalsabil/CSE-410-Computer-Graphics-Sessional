// Reflection //
        if(level >= recursion_level) return tmin;

        
        Vector3D eye_dir =  ray.direction.Subtract(ray_normal.direction.Multiply(ray.direction.dot(ray_normal.direction) * 2));
        // intersecting_point.Add(eye_dir.Multiply(epsilon));
        eye_dir.normalize();
        Ray reflected_ray = Ray(intersecting_point.Add(eye_dir.Multiply(epsilon)), eye_dir);

        double t, tMinimum = 99999999;
        int nearest = 9999999;

        for(int i = 0; i < objects.size(); i++){
            Color *tempcolor = new Color;
            t = objects[i]->intersect(reflected_ray, tempcolor, 0);
            // cout << "t: " << t << endl;
            if(t > 0.0 && t < tMinimum){
                tMinimum = t;
                nearest = i;
            }
        }
        
        // cout << "near: " << nearest << endl;
        if(nearest != 9999999){
            Color *reflected_color = new Color;
            objects[nearest]->intersect(reflected_ray, reflected_color, level + 1);
            color->red += reflected_color->red * getCoEfficients().reflection;
            color->green += reflected_color->green * getCoEfficients().reflection;
            color->blue += reflected_color->blue * getCoEfficients().reflection;
        }


        return tmin;